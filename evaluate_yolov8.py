from ultralytics import YOLO
import torch

# Ki·ªÉm tra xem c√≥ GPU kh√¥ng, n·∫øu kh√¥ng th√¨ d√πng CPU
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using device: {device}")

# Load m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán (best.pt)
model_path = "/home/khoa_is_sleep/DETECT_macadamia-nuts-2/runs/detect/train2/weights/best.pt"
model = YOLO(model_path).to(device)

# ƒê√°nh gi√° m√¥ h√¨nh tr√™n t·∫≠p validation
metrics = model.val(
    data="/home/khoa_is_sleep/DETECT_macadamia-nuts-2/data.yaml",  # File c·∫•u h√¨nh dataset
    batch=10,       # Batch size (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
    imgsz=640,      # K√≠ch th∆∞·ªõc ·∫£nh
    device=device,  # Ch·∫°y tr√™n GPU ho·∫∑c CPU
    conf=0.001,     # Ng∆∞·ª°ng confidence th·∫•p ƒë·ªÉ t√≠nh mAP ch√≠nh x√°c
    iou=0.5         # IoU threshold
)

# In k·∫øt qu·∫£ ƒë√°nh gi√°
print("\nüìä Evaluation Results:")
print(f"Precision: {metrics.box.map50:.4f}")    # mAP@0.5
print(f"Recall: {metrics.box.map75:.4f}")       # Recall @ 0.75 IoU
print(f"mAP@0.5: {metrics.box.map50:.4f}")      # mAP@0.5
print(f"mAP@0.5:0.95: {metrics.box.map:.4f}")   # mAP@0.5:0.95
